version: 2.1
jobs:
  Kernel_miatoll:
    docker:
      - image: ubuntu:18.04
    working_directory: ~/kernel
    steps:
      - run:
          name: Prepare Environment
          no_output_timeout: 20m
          command: |
            export TERM=xterm
            apt-get update -y && ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime && apt-get install --no-install-recommends bison build-essential ca-certificates cpio curl flex git gnupg gperf ccache liblz4-tool libncurses5-dev libsdl1.2-dev libxml2 libxml2-utils lzop pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev build-essential kernel-package libncurses5-dev bzip2 git python wget gcc g++ curl sudo libssl-dev openssl tzdata ssh -y

      - restore_cache:
          keys:
            - source-{{ .Branch }}
            - source

      - checkout

      - run:
          name: Downloading sources
          no_output_timeout: 20m
          command: |
            cd ~
            wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/eb1dc47526af89fdd4c584b12b3120fbfd6da654/clang-r487747b.tar.gz -O clang.tar.gz
            mkdir clang && tar -xzf clang.tar.gz -C clang && rm clang.tar.gz
            git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 --depth=1 toolchain
            git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 --depth=1 toolchain-arm
            git clone https://github.com/GeoZac/AnyKernel.git --depth=1 --branch=miatoll AnyKernel

      - run:
          name: Compile
          no_output_timeout: 20m
          command: |
            echo 'export CROSS_COMPILE=$HOME/toolchain/bin/aarch64-linux-android-' >> $BASH_ENV
            echo 'export PATH="$HOME/clang/bin:$HOME/toolchain/bin:$HOME/toolchain-arm/bin:$PATH"' >> $BASH_ENV
            echo 'export ARCH=arm64' >> $BASH_ENV
            echo 'export SUBARCH=arm64' >> $BASH_ENV
            echo 'export KBUILD_BUILD_USER="GeoZac"' >> $BASH_ENV
            echo 'export KBUILD_BUILD_HOST="CircleCI"' >> $BASH_ENV
            echo 'export COMMIT_HEAD="$(git -C kernel log -1 --pretty="%h %s")"' >> $BASH_ENV
            source $BASH_ENV
            cd ~/kernel
            make clean && make mrproper O=output
            make cust_defconfig O=output
            make -j$(nproc --all) CC=clang LD=ld.lld CROSS_COMPILE=aarch64-linux-android- CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-androideabi- O=output

      - run:
          name: Check version
          no_output_timeout: 20m
          command: |
            cat ~/kernel/output/include/generated/compile.h

      - run:
          name: Send to telegram
          no_output_timeout: 20m
          command: |
            cd ~/AnyKernel
            cp ~/kernel/output/arch/arm64/boot/Image.gz .
            cp ~/kernel/output/arch/arm64/boot/dtbo.img .
            ZIPNAME="Kernel-$(date +%d_%m_%Y_%H_%M)-miatoll.zip"
            zip -r9 "${ZIPNAME}" ./* -x ".git/*" "README.md" ".gitignore" "*.zip"
            curl -F chat_id=$CHAT_ID -F document=@$ZIPNAME -F caption="$COMMIT_HEAD on $CIRCLE_BRANCH" -F parse_mode=markdown https://api.telegram.org/bot$BOT_API_TOKEN/sendDocument > /dev/null

      - store_artifacts:
          path: ~/kernel/output/.config
          destination: kernel_defconfig

      - save_cache:
          paths:
            - "~/kernel/.git"
          key: source-{{ .Branch }}

    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large

workflows:
  version: 2
  cooking:
    jobs:
      - Kernel_miatoll
